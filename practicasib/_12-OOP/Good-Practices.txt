
CAPITULO 0 

- Las "mejores prácticas" son cosas que deberías hacer, porque esa forma de hacer las cosas se considera generalmente un estándar o muy recomendable. Es decir, o todo el mundo lo hace así (y si lo haces de otro modo, estarás haciendo algo que la gente no espera), o es superior a las alternativas. 
- Nombra tus archivos de código something.cpp, donde something es un nombre de tu elección, y .cpp es la extensión que indica que el archivo es un archivo fuente C++. 
- Cree un nuevo proyecto para cada nuevo programa que escriba. 
- Utiliza la configuración de depuración cuando desarrolles tus programas. Cuando estés listo para distribuir tu ejecutable a otros, o quieras probar el rendimiento, utiliza la configuración de la release build. 
- Desactive las extensiones del compilador para asegurarse de que sus programas (y prácticas de codificación) siguen cumpliendo los estándares de C++ y funcionarán en cualquier sistema. 
- No dejes que las advertencias se acumulen. Resuélvelos a medida que los encuentres (como si fueran errores). De lo contrario, un aviso sobre un problema grave puede perderse entre avisos sobre problemas no graves. 
- Sube al máximo los niveles de alerta, sobre todo mientras aprendes. Te ayudará a identificar posibles problemas. - Active la opción "Tratar las advertencias como errores". Esto le obligará a resolver todos los problemas que causen advertencias.

CAPITULO 1

- Comenta tu código abundantemente, y escribe tus comentarios como si hablaras con alguien que no tiene ni idea de lo que hace el código. No des por sentado que recordarás por qué has tomado determinadas decisiones. 
- Aunque el lenguaje lo permite, evite definir varias variables del mismo tipo en una misma sentencia. En su lugar, defina cada variable en una sentencia independiente en su propia línea (y luego utilice un comentario de una sola línea para documentar para qué se utiliza). 
- Favorezca la inicialización utilizando llaves siempre que sea posible. 
- Inicialice sus variables en el momento de la creación. 
- Emite una nueva línea cada vez que se completa una línea de salida. 
- Prefiera '\n' a std::endl cuando envíe texto a la consola. 
- Existe cierto debate sobre si es necesario inicializar una variable inmediatamente antes de darle un valor proporcionado por el usuario a través de otra fuente (por ejemplo, std::cin), ya que el valor proporcionado por el usuario simplemente sobrescribirá el valor de inicialización. En línea con nuestra recomendación anterior de que las variables deben ser siempre inicializadas, la mejor práctica es inicializar la variable primero. 
- Cuando trabajes en un programa existente, utiliza las convenciones de ese programa (aunque no se ajusten a las mejores prácticas modernas). Utiliza las mejores prácticas modernas cuando escribas nuevos programas. 
- Sus líneas no deben superar los 80 caracteres. 
- Se recomienda utilizar la función de formateo automático para mantener la coherencia del estilo de formateo del código. 
- Los nuevos programadores a menudo intentan escribir un programa entero de una vez, y luego se agobian cuando produce muchos errores. Una estrategia mejor es añadir una pieza cada vez, asegurarse de que compila y probarla. Luego, cuando estés seguro de que funciona, pasa a la siguiente parte.

CAPITULO 2

- La función principal debe devolver el valor 0 si el programa se ejecuta normalmente.
- Asegúrese de que sus funciones con tipos de retorno no vacíos devuelven un valor en todos los casos. Si no se devuelve un valor desde una función que devuelve un valor, se producirá un comportamiento indefinido.
- Siga la mejor práctica NTR: "No Te Repitas". Si necesitas hacer algo más de una vez, considera cómo modificar tu código para eliminar tanta redundancia como sea posible. Las variables pueden utilizarse para almacenar los resultados de cálculos que deban utilizarse más de una vez (para no tener que repetir el cálculo). Las funciones pueden utilizarse para definir una secuencia de sentencias que queremos ejecutar más de una vez. Y los bucles (que se verán en un capítulo posterior) pueden utilizarse para ejecutar una sentencia más de una vez. 
- No coloque una sentencia return al final de una función que no devuelva valores. 
- Defina sus variables locales tan cerca de su primer uso como sea razonable. 
- Cuando trate errores de compilación en sus programas, resuelva siempre primero el primer error producido y luego vuelva a compilar. 
- Mantenga los nombres de los parámetros en las declaraciones de las funciones. 
- Cuando añadas nuevos archivos de código a tu proyecto, dales una extensión .cpp. 
- Utilice prefijos de namespaces explícitos para acceder a identificadores definidos en un espacio de nombres. 
- Utilice el sufijo .h para nombrar los archivos de cabecera. 
- Si un archivo de cabecera está emparejado con un archivo de código (por ejemplo, add.h con add.cpp), ambos deben tener el mismo nombre base (add). 
- Los archivos fuente deben #include (include) el archivo de cabecera correspondiente (si existe). 
- Cuando incluya un archivo de cabecera de la biblioteca estándar, utilice la versión sin la extensión .h si existe. Las cabeceras definidas por el usuario deben seguir utilizando la extensión .h. 
- Cada archivo debe #incluir explícitamente todos los archivos de cabecera que necesita para compilar. No confíe en cabeceras incluidas transitoriamente desde otras cabeceras.
- Para maximizar la posibilidad de que los #includes que faltan sean marcados por el compilador, ordena tus #includes de la siguiente manera:
1. El archivo de cabecera emparejado
2. Otras cabeceras de su proyecto
3. Cabeceras de bibliotecas de terceros
4. Cabeceras de biblioteca estándar
Las cabeceras de cada agrupación deben ordenarse alfabéticamente.
- Prefiera los protectores de cabecera (header guards) a "#pragma once" para obtener la máxima portabilidad.

CAPITULO 3 

- Utilice una herramienta de análisis estático en sus programas para ayudar a encontrar áreas en las que su código no cumple con las mejores prácticas.

CAPITULO 4 

- Utilice una lista de parámetros vacía en lugar de void para indicar que una función no tiene parámetros. - Para lograr la máxima compatibilidad, no debe suponer que las variables son mayores que el tamaño mínimo especificado. 
- Prefiera los tipos abreviados que no utilizan el sufijo int ni el prefijo signed. 
- Prefiera los números con signo a los números sin signo para almacenar cantidades (incluso cantidades que no deben ser negativas) y realizar operaciones matemáticas. Evita mezclar números con y sin signo.
- Prefiera int cuando el tamaño del entero no importe (por ejemplo, el número siempre cabrá dentro del rango de un entero con signo de 2 bytes). Por ejemplo, si está pidiendo al usuario que introduzca su edad, o que cuente del 1 al 10, no importa si int tiene 16 o 32 bits (los números cabrán de cualquier forma). Esto cubrirá la gran mayoría de los casos con los que probablemente te encuentres.
- Prefiera std::int#_t cuando almacene una cantidad que necesite un rango garantizado.
- Prefiera std::uint#_t cuando realice manipulación de bits o cuando se requiera un comportamiento envolvente bien definido.
- Evite lo siguiente siempre que sea posible:
  • Tipos sin signo para cantidades retenedoras
  • Los tipos enteros de 8 bits de ancho fijo
  • Los tipos rápidos y menos fijos de ancho
  • Cualquier entero de ancho fijo específico del compilador -- por ejemplo, Visual Studio define
  int8, int16, etc... 
- Asegúrate siempre de que el tipo de tus literales coincide con el tipo de las variables a las que se asignan o que se utilizan para inicializar. De lo contrario, se producirá una conversión innecesaria, posiblemente con pérdida de precisión. 
- Es preferible utilizar double en lugar de float a menos que se disponga de poco espacio, ya que la falta de precisión de un float suele dar lugar a imprecisiones. 
- Evite por completo la división por 0, incluso si su compilador la admite. 
- Ponga los caracteres independientes entre comillas simples (por ejemplo, 't' ot '\n', y no "t" o "\n"). Esto ayuda al compilador a optimizar más eficientemente. 
- Evite los literales con varios caracteres (por ejemplo '56'). 
- Coloque const antes del tipo (porque es más idiomático hacerlo). 
- No uses const cuando pases por valor. 
- No uses const cuando devuelvas por valor. 
- Prefiera las variables constantes a las macros tipo objeto con texto de sustitución. 
- Cualquier variable que no deba ser modificable después de la inicialización y cuyo inicializador sea conocido en tiempo de compilación debe declararse como constexpr. 
- Cualquier variable que no deba ser modificable después de la inicialización y cuyo inicializador no sea conocido en tiempo de compilación debe declararse como const. 
- Prefiera el sufijo literal L (mayúscula) a l (minúscula). 
- Evite los números mágicos en su código (utilice variables constexpr en su lugar). 
- Si utiliza std::getline() para leer cadenas, utilice el manipulador de entrada std::cin >> std::ws para ignorar los espacios en blanco iniciales. 
- No pasar std::string por valor, ya que hacer copias de std::string es costoso. Prefiera parámetros std::string_view. 
- Prefiera std::string_view a std::string cuando necesite una cadena de sólo lectura, especialmente para parámetros de funciones.

CAPITULO 5 

- Utilice paréntesis para dejar claro cómo debe evaluarse una expresión no trivial (aunque sean técnicamente innecesarios). 
- Las expresiones con un único operador de asignación no necesitan tener el operando derecho de la asignación entre paréntesis. 
- Aparte de las reglas de precedencia y asociatividad de los operadores, suponga que las partes de una expresión pueden evaluarse en cualquier orden. Asegúrese de que las expresiones que escribe no dependen del orden de evaluación de esas partes. 
- Es preferible utilizar la versión prefijada de los operadores de incremento y decremento, ya que suelen ser más eficaces y es menos probable que se produzcan problemas extraños con ellos. 
- Evite utilizar el operador coma, excepto dentro de los bucles for. 
- Ponga siempre entre paréntesis la parte condicional del operador condicional, y considere también la posibilidad de poner entre paréntesis el operador condicional completo. 
- Utilice el operador condicional sólo para condicionales sencillas en las que utilice el resultado y mejoren la legibilidad. 
- No añadas == o != innecesarios a las condiciones. Dificultan la lectura sin aportar ningún valor añadido. 
- Si se pretende que el operador lógico NOT opere sobre el resultado de otros operadores, los otros operadores y sus operandos deben ir entre paréntesis. - Cuando mezcle AND y OR en una única expresión, ponga explícitamente entre paréntesis cada operación para asegurarse de que se evalúan como usted pretende.

CAPITULO 6

- Mantenga el nivel de anidamiento de sus funciones en 3 o menos. Si tu función necesita más niveles de anidamiento, considera la posibilidad de refactorizarla en subfunciones. 
- Defina las variables en el ámbito más limitado posible. Evita crear nuevos bloques cuyo único propósito sea limitar el ámbito de las variables. 
- Considere el uso de un prefijo "g" o "g_" al nombrar las variables globales no-const, para ayudar a diferenciarlas de las variables locales y los parámetros de función. 
- Evitar el "shadowing" de variables. 
- Utilice variables locales en lugar de globales siempre que sea posible. 
- Si necesitas constantes globales y tu compilador es compatible con C++17, prefiere definir variables globales constexpr inline en un fichero de cabecera. 
- Inicialice sus variables locales estáticas. Las variables locales estáticas sólo se inicializan la primera vez que se ejecuta el código, no en llamadas posteriores. 
- Evite las variables locales estáticas a menos que la variable nunca necesite ser reiniciada. 
- Prefiera los espacios de nombres explícitos a las sentencias "using". Evite el uso de directivas siempre que sea posible. Las declaraciones de uso pueden utilizarse dentro de bloques. 
- No utilice la palabra clave inline para solicitar la expansión en línea de sus funciones. 
- Evite el uso de la palabra clave inline para funciones a menos que tenga una razón específica y convincente para hacerlo. 
- Utilice un tipo de retorno constexpr para las funciones que necesitan devolver una constante en tiempo de compilación. 
- Utilice consteval si tiene una función que debe ejecutarse en tiempo de compilación por alguna razón (por ejemplo, rendimiento).

CAPITULO 7 

- Considere la posibilidad de colocar las sentencias individuales asociadas a un if o un else en bloques (sobre todo mientras esté aprendiendo). Los desarrolladores de C++ más experimentados a veces ignoran esta práctica en favor de un espaciado vertical más ajustado. 
- Coloque el caso por defecto en último lugar en el bloque switch. 
- Cada conjunto de sentencias bajo una etiqueta debe terminar en una sentencia break o return. Esto incluye las sentencias bajo la última etiqueta del switch. 
- Utilice el atributo [[fallthrough]] (junto con una sentencia null) para indicar un fallthrough intencionado. 
- Si define variables utilizadas en una sentencia case, hágalo en un bloque dentro del case. 
- Evite las sentencias goto (a menos que las alternativas sean significativamente peores para la legibilidad del código). 
- Favorezca while(true) para bucles infinitos intencionados. 
- Prefiera los bucles while a los do-while en igualdad de condiciones. 
- Evite el operador != al realizar comparaciones numéricas en la condición de bucle for. 
- La definición de múltiples variables (en la sentencia init) y el uso del operador coma (en la sentencia es aceptable dentro de una expresión for. 
- Prefiera los bucles for a los bucles while cuando haya una variable de bucle obvia. Prefiera los bucles while a los bucles for cuando no haya una variable de bucle obvia. 
- Utilice "break" and "continue" cuando simplifiquen la lógica de su bucle. 
- Utilice los retornos anticipados cuando simplifiquen la lógica de su función. 
- Sólo use un halt si no hay una forma segura de retornar normalmente desde la función principal. Si no ha deshabilitado las excepciones, prefiera usar excepciones para manejar errores de forma segura. 
- Escriba su programa en unidades pequeñas y bien definidas (funciones o clases), compile a menudo y pruebe su código sobre la marcha. 
- Aspire a una cobertura de ramas del 100% de su código. 
- Utilice la prueba "0, 1, 2" para asegurarse de que sus bucles funcionan correctamente con diferentes números de iteraciones. 
- Pruebe diferentes categorías de valores de entrada para asegurarse de que su unidad los maneja correctamente.
- Utilice assertions para documentar casos que deberían ser lógicamente imposibles. 
- Utilice std::random_device para sembrar tus PRNGs (a menos que no esté implementado correctamente para tu compilador/arquitectura de destino).

CAPITULO 8 

- Evite las conversiones estrechas siempre que sea posible. Si necesita realizar una, utilice static_cast para que sea una conversión explícita. 
- Evite utilizar moldes de tipo C. 
- Favorece static_cast cuando necesites convertir un valor de un tipo a otro tipo. 
- Nombra tus alias de tipo empezando con mayúscula y no utilices un sufijo (a menos que tengas una razón específica para hacer lo contrario).
- Prefiera los alias de tipos a los typedefs. 
- Utilice los alias de tipos con sensatez, cuando supongan una clara ventaja para la legibilidad o el mantenimiento del código. 
- Utilice la deducción de tipo para sus variables, a menos que necesite comprometerse con un tipo específico. 
- Utilice la sobrecarga de funciones para simplificar su programa. 
- Si la función tiene una declaración forward (especialmente una en un fichero de cabecera), ponga el argumento por defecto allí. En caso contrario, coloque el argumento por defecto en la definición de la función. 
- Utilice una sola letra mayúscula (empezando por T) para nombrar sus tipos de plantilla (por ejemplo, T, U, V, etc...) 
- Favorezca la sintaxis normal de llamada a función cuando utilice plantillas de función. 
- Utilice plantillas de funciones para escribir código genérico que pueda funcionar con una amplia variedad de tipos siempre que lo necesite. 
- Siéntase libre de utilizar plantillas de funciones abreviadas con un único parámetro automático, o donde cada parámetro automático debe ser un tipo independiente (y su estándar de lenguaje está establecido en C++20 o más reciente).

CAPITULO 9 

- Al definir una referencia, coloque el signo ampersand junto al tipo (no junto al nombre de la variable de referencia). 
- Favorece las referencias lvalue a const sobre las referencias lvalue a non-const a menos que necesites modificar el objeto referenciado. 
- Favorezca el paso por referencia const sobre el paso por referencia no-const a menos que tenga una razón específica para hacer lo contrario (por ejemplo, la función necesita cambiar el valor de un argumento). - Pasar tipos fundamentales por valor, y tipos de clase (o estructura) por referencia constante. 
- Prefiera el paso por valor para los objetos que son baratos de copiar, y el paso por referencia constante para los objetos que son caros de copiar. Si no estás seguro de si un objeto es barato o caro de copiar, prefiere pasar por referencia const. 
- Al declarar un tipo de puntero, coloque el asterisco junto al nombre del tipo. 
- Inicializa siempre tus punteros. 
- Valore inicializar sus punteros (para que sean punteros nulos) si no los está inicializando con la dirección de un objeto válido. 
- Utilice nullptr cuando necesite un literal de puntero nulo para inicializar, asignar o pasar un puntero nulo a una función. 
- Un puntero debe contener la dirección de un objeto válido, o bien tener el valor nullptr. De esta forma, sólo tendremos que comprobar si un puntero es nulo, y podremos asumir que cualquier puntero no nulo es válido. 
- Prefiera las referencias a los punteros a menos que se necesiten las capacidades adicionales que proporcionan los punteros. 
- Prefiera el paso por referencia al paso por dirección a menos que tenga una razón específica para utilizar el paso por dirección. 
- Evite devolver referencias a variables estáticas locales no-const. 
- Prefiera el retorno por referencia al retorno por dirección a menos que la capacidad de devolver "ningún objeto" (usando nullptr) sea importante. 
- Si desea una referencia const, vuelva a aplicar el calificador const incluso cuando no sea estrictamente necesario, ya que deja clara su intención y ayuda a evitar errores.
- Si no se van a proporcionar valores inicializadores explícitos para un agregado, prefiera la inicialización de valores (con un inicializador de llaves vacío) a la inicialización por defecto (sin llaves).
- Cuando utilice un puntero para acceder al valor de un miembro, utilice el operador de selección de miembro desde puntero (->) en lugar del operador de selección de miembro (.). 
- Si desea un puntero const, vuelva a aplicar el calificador const incluso cuando no sea estrictamente necesario, ya que deja clara su intención y ayuda a evitar errores.

CAPITULO 10 

- Denomine los tipos definidos por el programa empezando por mayúscula y sin sufijo.
- Un tipo definido por el programa y utilizado en un único archivo de código debe definirse en ese archivo de código lo más cerca posible del primer punto de uso.
Un tipo definido por el programa utilizado en varios archivos de código debe definirse en un archivo de cabecera con el mismo nombre que el tipo definido por el programa y luego #incluirse en cada archivo de código según sea necesario.
- Nombra tus tipos enumerados empezando por mayúscula. Nombra tus enumeradores empezando por una letra minúscula. 
- Es preferible colocar las enumeraciones dentro de una región de ámbito con nombre (como un espacio de nombres o una clase) para que los enumeradores no contaminen el espacio de nombres global. 
- Evite asignar valores explícitos a sus enumeradores a menos que tenga una razón de peso para hacerlo. 
- Especifique el tipo base de una enumeración sólo cuando sea necesario. 
- Favorezca las enumeraciones con alcance sobre las enumeraciones sin alcance a menos que haya una razón de peso para hacer lo contrario. 
- Prefiera la forma de lista con corchetes (no copia) al inicializar agregados. 
- Cuando se añade un nuevo miembro a un agregado, lo más seguro es añadirlo al final de la lista de definiciones para que los inicializadores de otros miembros no se desplacen. 
- Proporcione un valor por defecto para todos los miembros. Esto asegura que sus miembros serán inicializados incluso si la definición de la variable no incluye una lista de inicializadores.

CAPITULO 11 
- Inicialice explícitamente sus arrays (incluso cuando el tipo de elemento sea autoinicializable). 
- Prefiera std::string_view a std::string y a las cadenas estilo C cuando sólo necesite acceso de sólo lectura a una cadena (a menos que no pueda garantizar que la cadena que se está visualizando permanecerá viva durante el tiempo de vida de std::string_view, en cuyo caso debería preferir std::string). 
- Prefiera pasar cadenas usando std::string_view (por valor) en lugar de const std::string&, a menos que su función llame a otras funciones que requieran cadenas estilo C o parámetros std::string. 
- Favorezca la sintaxis de puntero (*) sobre la sintaxis de array ([]) para parámetros de función de array. 
- Establece los punteros eliminados a nullptr a menos que salgan del ámbito inmediatamente después. 
- Establece los punteros eliminados a nullptr a menos que salgan del ámbito inmediatamente después. 
- En las declaraciones de elementos de bucles for-each, si sus elementos son tipos no fundamentales, utilice referencias o referencias const por razones de rendimiento. 
- Pase siempre std::array por referencia o referencia constante 
- A menos que se especifique lo contrario, no asuma que los algoritmos de la biblioteca estándar se ejecutarán en una secuencia determinada. std::copy, std::copy_backward, std::move, y std::move_backward tienen garantías secuenciales. 
- Favorece el uso de funciones de la biblioteca de algoritmos en lugar de escribir tu propia funcionalidad para hacer lo mismo.

CAPITULO 12 

- En general, prefiera la iteración a la recursividad, excepto cuando la recursividad realmente tiene sentido.
- Sólo inicializa variables en la captura si su valor es corto y su tipo es obvio. De lo contrario, es mejor definir la variable fuera de la lambda y capturarla. 
- Intenta evitar las lambdas mutables. Las lambdas no mutables son más fáciles de entender y no sufren los problemas anteriores, así como otros más peligrosos que surgen cuando se añade la ejecución paralela.


CAPITULO 13 

- Nombra tus clases empezando por mayúscula.
- Utilice la palabra clave struct para las estructuras que sólo contienen datos. Utilice la palabra clave class para objetos que tengan tanto datos como funciones.
- Haz que las variables miembro sean privadas y las funciones miembro públicas, a menos que tengas una buena razón para no hacerlo.
- Los getters deben devolver por valor o referencia const. 
- Si tiene constructores en tu clase y necesita un constructor por defecto que no haga nada (por ejemplo, porque todos tus miembros se inicializan utilizando inicialización de miembros no estáticos), utilice "= default". 
- Inicialice siempre todas las variables miembro de sus objetos.
- Favorecer la inicialización por valor frente a la inicialización por defecto para los objetos de clase. - Favorecer la inicialización de los corchetes para inicializar los objetos de clase. 
- Utilice listas de inicializadores de miembros para inicializar las variables miembro de la clase en lugar de asignarlas.
- Si tienes varios constructores con la misma funcionalidad, utiliza constructores delegados para evitar duplicar código.
- Haga que cualquier función miembro que no modifique el estado del objeto de la clase sea const, para que pueda ser llamada por objetos const.
- Acceda a los miembros estáticos por el nombre de la clase (utilizando el operador de resolución de ámbito) en lugar de a través de un objeto de la clase (utilizando el operador de selección de miembros. 

CAPITULO 14 

- Al sobrecargar operadores, es mejor mantener la función de los operadores lo más cerca posible de la intención original de los operadores. 
- Prefiera sobrecargar operadores como funciones normales en lugar de friends si es posible hacerlo sin añadir funciones adicionales. 
- Defina únicamente operadores sobrecargados que tengan un sentido intuitivo para su clase. 
- Evite utilizar la inicialización por copia y utilice en su lugar la inicialización uniforme. 
- Considere la posibilidad de hacer explícitos los constructores y las funciones miembro de conversión definidas por el usuario para evitar errores de conversión implícitos.

CAPITULO 15 

- Implemente el tipo de relación más sencillo que satisfaga las necesidades de su programa, no lo que parezca correcto en la vida real. 
- Si proporciona la construcción de listas, es una buena idea proporcionar también la asignación de listas. 

CAPÍTULO 16 

- Favorecer a los miembros privados frente a los protegidos.
- Utilice la herencia pública a menos que tenga una razón específica para hacer lo contrario. 
- Evite la herencia múltiple a menos que las alternativas conduzcan a una mayor complejidad. 

CAPÍTULO 17 

- Nunca llame a funciones virtuales desde constructores o destructores.
- Utilice la palabra clave virtual en las funciones virtuales de una clase base. Utilice el especificador override (pero no la palabra clave virtual) en funciones override en clases derivadas.

CAPITULO 18